const STRING="string",OBJECT="object",FUNCTION="function",NUMBER="number",checkType=(e,t,s)=>{if(t&&typeof t!==e)throw"Type Error: "+s},checkProps=e=>{if(checkType(STRING,e.id||"","Attribute id must be of type string"),checkType(STRING,e.innerHTML||"","Attribute innerHTML must be of type string"),checkType(STRING,e.style||"","Attribute style must be of type string"),checkType(STRING,e.src||"","Attribute src must be of type string"),checkType(STRING,e.alt||"","Attribute alt must be of type string"),checkType(OBJECT,e.classList||[],"classList must be of type string array"),e.classList)for(const t in e.classList)checkType(STRING,e.classList[t],"class element must be of type string");if(checkType(OBJECT,e.children||[],"children must be of type object"),e.children)for(const s in e.children)checkType(OBJECT,e.children[s],"children must be of type object");if(checkType(OBJECT,e.events||{},"events must be of type object"),e.events)for(const i in e.events)checkType(FUNCTION,e.events[i],"event must be of type function");checkType(OBJECT,e.attributes||{},"attributes must be of type object")},EL=(t,s={})=>{try{checkProps(s);let e=document.createElement(t);if(s.id&&(e.id=s.id),s.style&&(e.style=s.style),s.innerHTML&&(e.innerHTML=s.innerHTML),s.alt&&(e.alt=s.alt),s.src&&(e.src=s.src),s.width&&(e.width=s.width),s.height&&(e.height=s.height),s.disabled&&(e.disabled=s.disabled),s.placeholder&&(e.placeholder=s.placeholder),s.classList)for(const i in s.classList)e.classList.add(s.classList[i]);if(s.children)for(const c in s.children)e.appendChild(s.children[c]);if(s.events)for(const n in s.events)e.addEventListener(n,s.events[n]);if(s.attributes)for(const r in s.attributes)e.setAttribute(r,s.attributes[r]);return s=null,e}catch(e){throw"Failed to execute newElement: "+e}},span=(e,t={})=>(t.innerHTML=String(e),EL("span",t));
